#[macro_use]
extern crate glium;
extern crate glutin;

use glium::{DisplayBuild, Surface};

//Positional Data Type
struct Vertex2f {
    position: [f32; 2], //2point Vector XY, We will add Z later
}

fn main(){
	let display = glutin::WindowBuilder::new()
		.with_title("Hello OpenGL In Rust".to_string())
		.build_glium()
		.unwrap();

		implement_vertex!(Vertex2f,position);
		let x1 = Vertex2f {position:[-0.5,-0.5]};
		let x2 = Vertex2f {position:[-0.5,-0.5]};
		let x3 = Vertex2f {position:[-0.5,-0.5]};
		let triangle = vec![x1,x2,x3];

		let vertex_buffer = glium::VertexBuffer::new(&display,triangle);

		let indicies = glium::index::NoIndicies(glium::index::PrimitiveType::TriangleList);

		//Create some basic vertex and fragment shaders

		let vertex_shad
}